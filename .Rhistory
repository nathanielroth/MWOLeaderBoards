dfResults_Tons$mean_resid <- resid_mean_Tons$residAll
# R script for calculating linear regressions on MWO leaderboard data
#     Copyright (C) 2016  Nathaniel Roth
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
# Load data and separate into distinct data frames
dfLB <- read.csv("LeaderBoards.csv")
dfFull <- dfLB
dfIS <- dfLB[dfLB$ISCL == 'IS',]
dfClan <- dfLB[dfLB$ISCL == 'Clan',]
dfLight <- dfLB[dfLB$Class == 'Light',]
dfMedium <- dfLB[dfLB$Class == 'Medium',]
dfAssault <- dfLB[dfLB$Class == 'Assault',]
# full DS Analysis
# Linear model for IS Vs Clans  and tonage
lmF_ISCL_Tons  <- lm(Score ~ ISCL + Tons, dfFull)
summary(lmF_ISCL_Tons)
# Linear mode based on tons only
lmF_Tons <- lm(Score ~ Tons, dfFull)
summary(lmF_Tons)
# Plot the tonnage with the prediction
plot(dfFull$Tons, dfFull$Score, main=" Score by Tons", xlab="Tons", ylab="Score")
abline(lm(dfFull$Score~dfFull$Tons))
# Linear model of clan vs IS (just because)
lmf_ISCL <- lm(Score ~ ISCL, dfFull)
summary(lmf_ISCL)
# AOV on IS vs Clan and Tons to identify whether differences are real.
fit_ISCL_Tons <- aov(Score ~ ISCL*Tons, data=dfFull)
summary(fit_ISCL_Tons)
# IS only
lmIS <- lm(Score ~ Tons, dfIS)
summary(lmIS)
plot(dfIS$Tons, dfIS$Score, main="IS: Score by Tons", xlab="Tons", ylab="Score")
abline(lm(dfIS$Score~dfIS$Tons))
# Clan only
lmClan <- lm(Score ~ Tons, dfClan)
summary(lmClan)
plot(dfClan$Tons, dfClan$Score, main="Clans: Score by Tons", xlab="Tons", ylab="Score")
abline(lm(dfClan$Score~dfClan$Tons))
# predit Full with IS vs Clan and tons
dfFull_ISCL_Tons <- dfFull
dfFull_ISCL_Tons$predAll <- predict(lmF_ISCL_Tons)
dfFull_ISCL_Tons$residAll <- dfFull_ISCL_Tons$Score - dfFull_ISCL_Tons$predAll
mech_mean_ISCL_Tons <- aggregate(. ~ Mech, dfFull_ISCL_Tons, function(Score) c(mean = mean(Score)))
resid_mean_ISCL_Tons <- aggregate(. ~ Mech, dfFull_ISCL_Tons, function(residAll) c(mean = mean(residAll)))
resid_median_ISCL_Tons <- aggregate(. ~ Mech, dfFull_ISCL_Tons, function(residAll) c(median = median(residAll)))
dfResults_ISCL_Tons <- mech_mean_ISCL_Tons[,c("Mech","Score")]
dfResults_ISCL_Tons$pred <- resid_mean_ISCL_Tons$predAll
dfResults_ISCL_Tons$mean_resid <- resid_mean_ISCL_Tons$residAll
dfResults_ISCL_Tons$median_resid <- resid_median_ISCL_Tons$residAll
write.csv(dfResults_ISCL_Tons, file="results_full_ISCL_Tons.csv")
# predit Full with tons
dfFull_Tons <- dfFull
dfFull_Tons$predAll <- predict(lmF_Tons)
dfFull_Tons$residAll <- dfFull_Tons$Score - dfFull_Tons$predAll
mech_mean_Tons <- aggregate(. ~ Mech, dfFull_Tons, function(Score) c(mean = mean(Score)))
resid_mean_Tons <- aggregate(. ~ Mech, dfFull_Tons, function(residAll) c(mean = mean(residAll)))
resid_median_Tons <- aggregate(. ~ Mech, dfFull_Tons, function(residAll) c(median = median(residAll)))
dfResults_Tons <- mech_mean_Tons[,c("Mech","Score")]
dfResults_Tons$pred <- resid_mean_Tons$predAll
dfResults_Tons$mean_resid <- resid_mean_Tons$residAll
dfResults_Tons$median_resid <- resid_median_Tons$residAll
write.csv(dfResults_Tons, file="results_full_tons.csv")
# R script for calculating linear regressions on MWO leaderboard data
#     Copyright (C) 2016  Nathaniel Roth
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
# Load data and separate into distinct data frames
dfLB <- read.csv("LeaderBoards.csv")
dfFull <- dfLB
dfIS <- dfLB[dfLB$ISCL == 'IS',]
dfClan <- dfLB[dfLB$ISCL == 'Clan',]
dfLight <- dfLB[dfLB$Class == 'Light',]
dfMedium <- dfLB[dfLB$Class == 'Medium',]
dfAssault <- dfLB[dfLB$Class == 'Assault',]
# full DS Analysis
# Linear model for IS Vs Clans  and tonage
lmF_ISCL_Tons  <- lm(Score ~ ISCL + Tons, dfFull)
summary(lmF_ISCL_Tons)
# Linear mode based on tons only
lmF_Tons <- lm(Score ~ Tons, dfFull)
summary(lmF_Tons)
# Plot the tonnage with the prediction
plot(dfFull$Tons, dfFull$Score, main=" Score by Tons", xlab="Tons", ylab="Score")
abline(lm(dfFull$Score~dfFull$Tons))
# Linear model of clan vs IS (just because)
lmf_ISCL <- lm(Score ~ ISCL, dfFull)
summary(lmf_ISCL)
# AOV on IS vs Clan and Tons to identify whether differences are real.
fit_ISCL_Tons <- aov(Score ~ ISCL*Tons, data=dfFull)
summary(fit_ISCL_Tons)
# IS only
lmIS <- lm(Score ~ Tons, dfIS)
summary(lmIS)
plot(dfIS$Tons, dfIS$Score, main="IS: Score by Tons", xlab="Tons", ylab="Score")
abline(lm(dfIS$Score~dfIS$Tons))
# Clan only
lmClan <- lm(Score ~ Tons, dfClan)
summary(lmClan)
plot(dfClan$Tons, dfClan$Score, main="Clans: Score by Tons", xlab="Tons", ylab="Score")
abline(lm(dfClan$Score~dfClan$Tons))
# predit Full with IS vs Clan and tons
dfFull_ISCL_Tons <- dfFull
dfFull_ISCL_Tons$predAll <- predict(lmF_ISCL_Tons)
dfFull_ISCL_Tons$residAll <- dfFull_ISCL_Tons$Score - dfFull_ISCL_Tons$predAll
mech_mean_ISCL_Tons <- aggregate(. ~ Mech, dfFull_ISCL_Tons, function(Score) c(mean = mean(Score)))
resid_mean_ISCL_Tons <- aggregate(. ~ Mech, dfFull_ISCL_Tons, function(residAll) c(mean = mean(residAll)))
resid_median_ISCL_Tons <- aggregate(. ~ Mech, dfFull_ISCL_Tons, function(residAll) c(median = median(residAll)))
dfResults_ISCL_Tons <- mech_mean_ISCL_Tons[,c("Mech","Score")]
dfResults_ISCL_Tons$pred <- resid_mean_ISCL_Tons$predAll
dfResults_ISCL_Tons$mean_resid <- resid_mean_ISCL_Tons$residAll
dfResults_ISCL_Tons$median_resid <- resid_median_ISCL_Tons$residAll
write.csv(dfResults_ISCL_Tons, file="results_full_ISCL_Tons.csv")
# predit Full with tons
dfFull_Tons <- dfFull
dfFull_Tons$predAll <- predict(lmF_Tons)
dfFull_Tons$residAll <- dfFull_Tons$Score - dfFull_Tons$predAll
mech_mean_Tons <- aggregate(. ~ Mech, dfFull_Tons, function(Score) c(mean = mean(Score)))
resid_mean_Tons <- aggregate(. ~ Mech, dfFull_Tons, function(residAll) c(mean = mean(residAll)))
resid_median_Tons <- aggregate(. ~ Mech, dfFull_Tons, function(residAll) c(median = median(residAll)))
dfResults_Tons <- mech_mean_Tons[,c("Mech","Score")]
dfResults_Tons$pred <- resid_mean_Tons$predAll
dfResults_Tons$mean_resid <- resid_mean_Tons$residAll
dfResults_Tons$median_resid <- resid_median_Tons$residAll
write.csv(dfResults_Tons, file="results_full_tons.csv")
dfLB <- read.csv("LeaderBoards.csv")
dfFull <- dfLB
dfIS <- dfLB[dfLB$ISCL == 'IS',]
dfClan <- dfLB[dfLB$ISCL == 'Clan',]
dfLight <- dfLB[dfLB$Class == 'Light',]
dfMedium <- dfLB[dfLB$Class == 'Medium',]
dfAssault <- dfLB[dfLB$Class == 'Assault',]
plot(dfAssault$Mech, dfAssault$Score, main="Score by mech", xlab="Mech", ylab="Score")
View(dfAssault)
plot(dfAssault$Mech, dfAssault$Score, main="Score by mech", xlab=dfAssault$Mech, ylab="Score")
droplevels(dfAssault)
plot(dfAssault$Mech, dfAssault$Score, main="Score by mech", xlab="Mech", ylab="Score")
drop.levels(dfAssault)
plot(dfAssault$Mech, dfAssault$Score, main="Score by mech", xlab="Mech", ylab="Score")
install.packages("gdata")
dfAssault <- drop.levels(dfAssault)
plot(dfAssault$Mech, dfAssault$Score, main="Score by mech", xlab="Mech", ylab="Score")
library(gdata)
dfAssault <- drop.levels(dfAssault)
plot(dfAssault$Mech, dfAssault$Score, main="Score by mech", xlab="Mech", ylab="Score")
par(xaxt="n")
dfAssault <- drop.levels(dfAssault)
plot(dfAssault$Mech, dfAssault$Score, main="Score by mech",  ylab="Score")
library(gdata)
# Load data and separate into distinct data frames
dfLB <- read.csv("LeaderBoards.csv")
dfFull <- dfLB
dfIS <- dfLB[dfLB$ISCL == 'IS',]
dfClan <- dfLB[dfLB$ISCL == 'Clan',]
dfLight <- dfLB[dfLB$Class == 'Light',]
dfMedium <- dfLB[dfLB$Class == 'Medium',]
dfAssault <- dfLB[dfLB$Class == 'Assault',]
opar <-par()
par(las=1)
dfAssault <- drop.levels(dfAssault)
plot(dfAssault$Mech, dfAssault$Score, main="Score by mech",  ylab="Score")
par(las=3)
dfAssault <- drop.levels(dfAssault)
plot(dfAssault$Mech, dfAssault$Score, main="Score by mech",  ylab="Score")
dfAssault <- drop.levels(dfAssault)
plot(dfAssault$Mech, dfAssault$Score, main="Score by Mech", sub="by Tahawus",  ylab="Score")
par(mar=c(10,4,4,4))
fAssault <- drop.levels(dfAssault)
plot(dfAssault$Mech, dfAssault$Score, main="Score by Mech", sub="by Tahawus",  ylab="Score")
par(mar=c(8,4,4,4))
dfAssault <- drop.levels(dfAssault)
plot(dfAssault$Mech, dfAssault$Score, main="Score by Mech", sub="by Tahawus",  ylab="Score")
par(las=3)
par(mar=c(8,4,4,4))
dfAssault <- drop.levels(dfAssault)
plot(dfAssault$Mech, dfAssault$Score, main="Score by Mech", sub="by Tahawus",  ylab="Score")
plot(dfAssault$Mech, dfAssault$Score, main="Score by Mech", ylab="Score")
boxplot(Score~Mech, data=dfAssault, main="Score by Mech")
boxplot(Score~Mech, data=dfAssault, main="Score by Mech")
par(mar=c(8,4,4,4))
dfAssault <- drop.levels(dfAssault)
boxplot(Score~Mech, data=dfAssault, main="Score by Mech")
install.packages("vioplot")
vioplot(dfAssault)
library(vioplot)
vioplot(dfAssault)
boxplot(Score~Mech, data=dfAssault, main="Score by Mech", las=3)
library(gdata)
# Load data and separate into distinct data frames
dfLB <- read.csv("LeaderBoards.csv")
dfFull <- dfLB
dfIS <- dfLB[dfLB$ISCL == 'IS',]
dfClan <- dfLB[dfLB$ISCL == 'Clan',]
dfLight <- dfLB[dfLB$Class == 'Light',]
dfMedium <- dfLB[dfLB$Class == 'Medium',]
dfAssault <- dfLB[dfLB$Class == 'Assault',]
dfAssault <- drop.levels(dfAssault)
View(dfAssault)
boxplot(Score~Mech, data=dfAssault, main="Score by Mech", las=3)
par(mar=c(8,4,4,4))
boxplot(Score~Mech, data=dfAssault, main="Score by Mech", las=3)
dfLB <- read.csv("LeaderBoards.csv")
dfMechs <- read.csv("Mechs.csv")
levels(dfMechs$Mech)
dfFull <- merge(x=dfLB,y = dfMechs, by = "Mech", all.x = TRUE)
View(dfFull)
dfFull <- merge(dfLB,dfMechs)
dfLB <- read.csv("WeightOfTheWorld.csv")
dfFull <- merge(x=dfLB,y = dfMechs, by = "Mech", all.x = TRUE)
dfFull <- merge(x=dfLB,y = dfMechs, by = "Mech", all.y = TRUE)
dfFull <- merge(x=dfLB,y = dfMechs, by = "Mech", all.X = TRUE)
dfFull <- merge(x=dfLB,y = dfMechs, by = "Mech", all.X = TRUE)
View(dfFull)
View(dfLB)
library(data.table)
install.packages("data.table")
library(data.table)
dfFull <- merge(x=dfLB,y = dfMechs, by = "Mech")
View(dfFull)
dfFull <- merge(x=dfMechs,y = dfLB, by = "Mech")
View(dfFull)
dfFull <- merge(x=dfLB,y = dfMechs, by = "Mech",all = TRUE)
View(dfFull)
dfMechs <- read.csv("Mechs.csv")
dfFull <- merge(x=dfLB,y = dfMechs, by = "Mech",all = TRUE)
View(dfFull)
dfScore <- dfFull[dfFull$Score >= 1,]
View(dfScore)
dfNoScore <- dfFull[is.na(dfFull$Score),]
View(dfNoScore)
dfMechs <- read.csv("Mechs.csv")
dfFull <- merge(x=dfLB,y = dfMechs, by = "Mech",all = TRUE)
dfNoScore <- dfFull[is.na(dfFull$Score),]
View(dfNoScore)
dfScore <- na.omit(dfFull)
barplot(counts)
counts <- table(dfScore$ISCL)
barplot(counts)
counts <- table(dfScore$ISCL,dfScore$Mech)
barplot(counts)
dfScore <- drop.levels(dfScore)
library(gdata)
dfScore <- drop.levels(dfScore)
counts <- table(dfScore$ISCL,dfScore$Mech)
barplot(counts)
barplot(counts, las = 3 )
dfLight <- drop.levels(dfScore[dfScore$Class == 'Light',])
dfMedium <- drop.levels(dfScore[dfScore$Class == 'Medium',])
dfHeavy <- drop.levels(dfScore[dfScore$Class == 'Heavy',])
dfAssault <- drop.levels(dfScore[dfScore$Class == 'Assault',])
# Light
counts <- table(dfLight$ISCL,dfLight$Mech)
barplot(counts, main = "Light", Legend = Rownames(counts), las = 3 )
counts <- table(dfLight$ISCL,dfLight$Mech)
barplot(counts, main = "Light", Legend = rownames(counts), las = 3 )
barplot(counts, main = "Light", legend = rownames(counts), las = 3 )
counts <- table(dfMedium$ISCL,dfMedium$Mech)
barplot(counts, main = "Medium", legend = rownames(counts), las = 3 )
counts <- table(dfHeavy$ISCL,dfHeavy$Mech)
barplot(counts, main = "Heavy", legend = rownames(counts), las = 3 )
par(mar=c(10,4,4,4))
counts <- table(dfLight$ISCL,dfLight$Mech)
bplt <- barplot(counts, main = "Light", legend = rownames(counts), las = 3 )
text(x=counts+0.3, y=bplt, labels=as.character(counts), xpd=TRUE)
counts
counts <- table(dfLight$ISCL,dfLight$Mech)
counts
barplot(counts, main = "Light", legend = rownames(counts), las = 3 )
table(dfLight$Mech)
par(mar=c(10,4,4,4))
# IS Vs Clan
counts <- table(dfScore$ISCL,dfScore$Mech)
barplot(counts, las = 3 )
table(dfLight$Mech)
counts <- table(dfLight$ISCL,dfLight$Mech)
barplot(counts, main = "Light", legend = rownames(counts), las = 3 )
table(dfLight$Mech)
table(dfLight$ISCL)
counts <- table(dfLight$ISCL,dfLight$Mech)
barplot(counts, main = "Light", legend = rownames(counts), las = 3 )
table(dfLight$Mech)
table(dfLight$ISCL)
counts <- table(dfLight$ISCL,dfLight$Mech)
barplot(counts, main = "Light", legend = rownames(counts), las = 3 )
par(mar=c(10,4,4,4))
table(dfLight$Mech)
table(dfLight$ISCL)
counts <- table(dfLight$ISCL,dfLight$Mech)
barplot(counts, main = "Light", legend = rownames(counts), las = 3 )
table(dfMedium$Mech)
table(dfMedium$ISCL)
counts <- table(dfMedium$ISCL,dfMedium$Mech)
barplot(counts, main = "Medium", legend = rownames(counts), las = 3 )
t(table(dfLight$Mech))
t(table(dfMedium$Mech))
t(table(dfHeavy$Mech))
table(dfScore$Class,dfScore$ISCL,dfScore$Mech)
table(dfScore$Class,dfScore$Mech)
t(table(dfScore$Class,dfScore$Mech))
t(table(dfLight$Mech))
table(dfLight$ISCL)
counts <- table(dfLight$ISCL,dfLight$Mech)
barplot(counts, main = "Light", legend = rownames(counts), las = 3 )
par(mar=c(10,4,4,4))
counts <- table(dfLight$ISCL,dfLight$Mech)
barplot(counts, main = "Light", legend = rownames(counts), las = 3 )
counts <- table(dfMedium$ISCL,dfMedium$Mech)
barplot(counts, main = "Medium", legend = rownames(counts), las = 3 )
counts <- table(dfHeavy$ISCL,dfHeavy$Mech)
barplot(counts, main = "Heavy", legend = rownames(counts), las = 3 )
counts <- table(dfAssault$ISCL,dfAssault$Mech)
barplot(counts, main = "Assault", legend = rownames(counts), las = 3 )
t(table(dfLight$Mech))
table(dfLight$ISCL)
t(table(dfMedium$Mech))
table(dfMedium$ISCL)
t(table(dfHeavy$Mech))
table(dfHeavy$ISCL)
library(reshape)
library(reshape2)
melt(table(dfLight$Mech,dfLight$ISCL),id=c("Mech","ISCL"))
table(dfLight$ISCL)
melt(table(dfMedium$Mech,dfLight$ISCL),id=c("Mech","ISCL"))
table(dfMedium$ISCL)
melt(table(dfHeavy$Mech,dfLight$ISCL),id=c("Mech","ISCL"))
View(dfNoScore)
View(dfFull)
t(table(dfMedium$Mech))
counts <- table(dfHeavy$ISCL,dfHeavy$Mech)
counts
table(dfHeavy$ISCL)
table(dfAssault$ISCL)
counts <- table(dfAssault$ISCL,dfAssault$Mech)
counts
aggregate(dfHeavy, by=list(ISCL), FUN=mean)
aggregate(dfHeavy, by=list(dfHeavy$ISCL), FUN=mean)
aggregate(dfHeavy, by=list(dfHeavy$ISCL), FUN=median)
aggregate(dfHeavy$Place, by=list(dfHeavy$ISCL), FUN=median)
# R script for calculating linear regressions on MWO leaderboard data
#     Copyright (C) 2016  Nathaniel Roth
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
# Load data and separate into distinct data frames
dfLB <- read.csv("LeaderBoards.csv")
dfFull <- dfLB
dfIS <- dfLB[dfLB$ISCL == 'IS',]
dfClan <- dfLB[dfLB$ISCL == 'Clan',]
dfLight <- dfLB[dfLB$Class == 'Light',]
dfMedium <- dfLB[dfLB$Class == 'Medium',]
dfAssault <- dfLB[dfLB$Class == 'Assault',]
# full DS Analysis
# Linear model for IS Vs Clans  and tonage
lmF_ISCL_Tons  <- lm(Score ~ ISCL + Tons, dfFull)
summary(lmF_ISCL_Tons)
# Linear mode based on tons only
lmF_Tons <- lm(Score ~ Tons, dfFull)
summary(lmF_Tons)
# Plot the tonnage with the prediction
plot(dfFull$Tons, dfFull$Score, main=" Score by Tons", xlab="Tons", ylab="Score")
abline(lm(dfFull$Score~dfFull$Tons))
# predit Full with tons
dfFull_Tons <- dfFull
dfFull_Tons$predAll <- predict(lmF_Tons)
dfFull_Tons$residAll <- dfFull_Tons$Score - dfFull_Tons$predAll
mech_mean_Tons <- aggregate(. ~ Mech, dfFull_Tons, function(Score) c(mean = mean(Score)))
resid_mean_Tons <- aggregate(. ~ Mech, dfFull_Tons, function(residAll) c(mean = mean(residAll)))
resid_median_Tons <- aggregate(. ~ Mech, dfFull_Tons, function(residAll) c(median = median(residAll)))
dfResults_Tons <- mech_mean_Tons[,c("Mech","Score")]
dfResults_Tons$pred <- resid_mean_Tons$predAll
dfResults_Tons$mean_resid <- resid_mean_Tons$residAll
dfResults_Tons$median_resid <- resid_median_Tons$residAll
write.csv(dfResults_Tons, file="results_full_tons_wCyclops.csv")
dfFull_Tons_log <- dfFull
dfFull_Tons_log$lScore <- log(Score)
dfFull_Tons_log$lTons <- log(Tons)
dfFull_Tons_log <- dfFull
dfFull_Tons_log$lScore <- log(dfFull_Tons_log$Score)
dfFull_Tons_log$lTons <- log(dfFull_Tons_log$Tons)
dfFull_Tons_log <- dfFull
dfFull_Tons_log$lScore <- log(dfFull_Tons_log$Score)
dfFull_Tons_log$lTons <- log(dfFull_Tons_log$Tons)
lmF_logTons <- lm(lScore ~ lTons, dfFull_Tons_log)
summary(lmF_logTons)
dfFull_Tons_log$predAll <- predict(lmF_logTons)
dfFull_Tons_log$residAll <- dfFull_Tons_log$lScore - dfFull_Tons_log$predAll
mech_mean_Tons <- aggregate(. ~ Mech, dfFull_Tons_log, function(lScore) c(mean = mean(lScore)))
resid_mean_Tons <- aggregate(. ~ Mech, dfFull_Tons_log, function(residAll) c(mean = mean(residAll)))
resid_median_Tons <- aggregate(. ~ Mech, dfFull_Tons_log, function(residAll) c(median = median(residAll)))
dfResults_Tons <- mech_mean_Tons[,c("Mech","lScore")]
dfResults_Tons$pred <- resid_mean_Tons$predAll
dfResults_Tons$mean_resid <- resid_mean_Tons$residAll
dfResults_Tons$median_resid <- resid_median_Tons$residAll
write.csv(dfResults_Tons, file="results_full_tons_ll_wCyclops.csv")
lmF_Tons <- lm(Score ~ Tons, dfFull)
summary(lmF_Tons)
# Load data and separate into distinct data frames
dfLB <- read.csv("LeaderBoards.csv")
dfFull <- dfLB
dfIS <- dfLB[dfLB$ISCL == 'IS',]
dfClan <- dfLB[dfLB$ISCL == 'Clan',]
dfLight <- dfLB[dfLB$Class == 'Light',]
dfMedium <- dfLB[dfLB$Class == 'Medium',]
dfHeavy <- dfLB[dfLB$Class == 'Heavy',]
dfAssault <- dfLB[dfLB$Class == 'Assault',]
dfFull_Tons_log <- dfFull
dfFull_Tons_log$lScore <- log(dfFull_Tons_log$Score)
dfFull_Tons_log$lTons <- log(dfFull_Tons_log$Tons)
lmF_logTons_cl <- lm(lScore ~ lTons + ISCL, dfFull_Tons_log)
summary(lmF_logTons_cl)
lmF_logTons <- lm(lScore ~ lTons, dfFull_Tons_log)
summary(lmF_logTons)
dfFull_Tons_log$predAll <- predict(lmF_logTons)
dfFull_Tons_log$residAll <- dfFull_Tons_log$lScore - dfFull_Tons_log$predAll
mech_mean_Tons <- aggregate(. ~ Mech, dfFull_Tons_log, function(lScore) c(mean = mean(lScore)))
resid_mean_Tons <- aggregate(. ~ Mech, dfFull_Tons_log, function(residAll) c(mean = mean(residAll)))
resid_median_Tons <- aggregate(. ~ Mech, dfFull_Tons_log, function(residAll) c(median = median(residAll)))
dfResults_Tons <- mech_mean_Tons[,c("Mech","lScore")]
dfResults_Tons$pred <- resid_mean_Tons$predAll
dfResults_Tons$mean_resid <- resid_mean_Tons$residAll
dfResults_Tons$median_resid <- resid_median_Tons$residAll
write.csv(dfResults_Tons, file="results_full_tons_ll.csv")
lmF_ISCL_Tons  <- lm(Score ~ ISCL + Tons, dfFull)
summary(lmF_ISCL_Tons)
lmF_Tons <- lm(Score ~ Tons, dfFull)
summary(lmF_Tons)
plot(dfFull$Tons, dfFull$Score, main=" Score by Tons", xlab="Tons", ylab="Score")
abline(lm(dfFull$Score~dfFull$Tons))
fit_ISCL_Tons <- aov(Score ~ ISCL*Tons, data=dfFull)
summary(fit_ISCL_Tons)
